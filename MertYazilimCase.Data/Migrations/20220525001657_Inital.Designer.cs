// <auto-generated />
using System;
using MertYazilimCase.Data.DataLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MertYazilimCase.Data.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20220525001657_Inital")]
    partial class Inital
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MertYazilimCase.Data.Models.Alarm", b =>
                {
                    b.Property<int>("AlarmId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AlarmId"), 1L, 1);

                    b.Property<double>("MaximumPressure")
                        .HasColumnType("float");

                    b.Property<double>("MaximumTemperature")
                        .HasColumnType("float");

                    b.Property<double>("MinimumPressure")
                        .HasColumnType("float");

                    b.Property<double>("MinimumTemperature")
                        .HasColumnType("float");

                    b.Property<int>("WorkStationId")
                        .HasColumnType("int");

                    b.HasKey("AlarmId");

                    b.ToTable("Alarms");
                });

            modelBuilder.Entity("MertYazilimCase.Data.Models.Personel", b =>
                {
                    b.Property<int>("PersonelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonelId"), 1L, 1);

                    b.Property<string>("PersonelMail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonelName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorkStationId")
                        .HasColumnType("int");

                    b.HasKey("PersonelId");

                    b.ToTable("Personels");
                });

            modelBuilder.Entity("MertYazilimCase.Data.Models.ProductLine", b =>
                {
                    b.Property<int>("ProductLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductLineId"), 1L, 1);

                    b.Property<string>("ProductLineName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductLineId");

                    b.ToTable("ProductLines");
                });

            modelBuilder.Entity("MertYazilimCase.Data.Models.Sensor", b =>
                {
                    b.Property<int>("SensorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SensorId"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<double>("Pressure")
                        .HasColumnType("float");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<double>("Temperature")
                        .HasColumnType("float");

                    b.Property<int>("WorkStationId")
                        .HasColumnType("int");

                    b.HasKey("SensorId");

                    b.HasIndex("WorkStationId");

                    b.ToTable("Sensors");
                });

            modelBuilder.Entity("MertYazilimCase.Data.Models.WorkStation", b =>
                {
                    b.Property<int>("WorkStationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkStationId"), 1L, 1);

                    b.Property<int>("ProductLineId")
                        .HasColumnType("int");

                    b.Property<string>("WorkStationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WorkStationId");

                    b.HasIndex("ProductLineId");

                    b.ToTable("WorkStations");
                });

            modelBuilder.Entity("PersonelWorkStation", b =>
                {
                    b.Property<int>("PersonelsPersonelId")
                        .HasColumnType("int");

                    b.Property<int>("WorkStationsWorkStationId")
                        .HasColumnType("int");

                    b.HasKey("PersonelsPersonelId", "WorkStationsWorkStationId");

                    b.HasIndex("WorkStationsWorkStationId");

                    b.ToTable("PersonelWorkStation");
                });

            modelBuilder.Entity("MertYazilimCase.Data.Models.Sensor", b =>
                {
                    b.HasOne("MertYazilimCase.Data.Models.WorkStation", null)
                        .WithMany("Sensors")
                        .HasForeignKey("WorkStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MertYazilimCase.Data.Models.WorkStation", b =>
                {
                    b.HasOne("MertYazilimCase.Data.Models.ProductLine", null)
                        .WithMany("WorkStations")
                        .HasForeignKey("ProductLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PersonelWorkStation", b =>
                {
                    b.HasOne("MertYazilimCase.Data.Models.Personel", null)
                        .WithMany()
                        .HasForeignKey("PersonelsPersonelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MertYazilimCase.Data.Models.WorkStation", null)
                        .WithMany()
                        .HasForeignKey("WorkStationsWorkStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MertYazilimCase.Data.Models.ProductLine", b =>
                {
                    b.Navigation("WorkStations");
                });

            modelBuilder.Entity("MertYazilimCase.Data.Models.WorkStation", b =>
                {
                    b.Navigation("Sensors");
                });
#pragma warning restore 612, 618
        }
    }
}
